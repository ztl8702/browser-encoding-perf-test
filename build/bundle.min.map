{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/RecordingDelegate.js","webpack:///./src/Utils.js","webpack:///./src/RecordingDelegateOgg.js","webpack:///./src/flac/RecordingDelegateFlac.js","webpack:///./src/RecordingDelegateWav.js","webpack:///./src/RecordingController.js","webpack:///./src/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","default","object","property","prototype","hasOwnProperty","p","s","e","length","configurable","writable","RecordingDelegate","this","_createClass","Error","downloadBlob","blob","fileName","arguments","a","document","createElement","body","appendChild","style","href","download","click","timestampString","window","performance","now","timing","navigationStart","Date","toString","RecordingDelegateOgg_RecordingDelegateOgg","_RecordingDelegate","RecordingDelegateOgg","_ref","_temp","_this","_len","args","Array","_key","_possibleConstructorReturn","__proto__","getPrototypeOf","apply","concat","_mediaRecorder","TypeError","constructor","setPrototypeOf","RecordingDelegateOgg_createClass","_this2","Promise","resolve","error","navigator","getUserMedia","audioBitsPerSecond","audio","mimeType","stream","MediaRecorder","ondataavailable","_saveMediaData","data","err","console","log","_this3","_ensureInitialized","then","start","_this4","onstop","stop","_recordedData","audioURL","URL","createObjectURL","RecordingDelegateFlac_RecordingDelegateFlac","RecordingDelegateFlac","_encoder","_audioContext","_audioProcessingNode","_audioSource","_stopPromiseResolver","Worker","onmessage","command","_data","buf","cmd","AudioContext","createMediaStreamSource","createScriptProcessor","onaudioprocess","channelLeft","inputBuffer","getChannelData","postMessage","RecordingDelegateFlac_createClass","config","sampleRate","bps","connect","destination","disconnect","f","WAV_BITS_PER_SAMPLE","WAV_SAMPLE_RATE","RecordingDelegateWav_RecordingDelegateWav","RecordingDelegateWav","_wavLength","_wavBuffers","_saveWavPCM","RecordingDelegateWav_createClass","push","_createWavHeader","_exportMonoWAV","buffer","ArrayBuffer","view","DataView","writeUTFBytes","setUint32","setUint16","Number","Uint8Array","Float32Array","buffers","dataLength","header","len","setUint8","output","offset","inputBuffers","input","jsize","isize","j","Math","max","min","setInt16","Blob","type","string","lng","charCodeAt","RecordingController_RecordingController","RecordingController","format","RECORDING_FORMAT","_delegate","RecordingController_createClass","w","runTest","setTimeout","startRecording","stopRecording","downloadRecordedData"],"mappings":"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","file":"bundle.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/libs/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","/**\n * Common interface for recording mechanisms\n */\nexport class RecordingDelegate {\n    /**\n     * Starts recording.\n     *\n     * @returns {Promise}\n     */\n    start() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Stops recording.\n     *\n     * @returns {Promise}\n     */\n    stop() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Initiates download.\n     *\n     * @returns {void}\n     */\n    download() {\n        throw new Error('Not implemented');\n    }\n}\n","/**\n * Force download of Blob in browser by faking an <a> tag.\n *\n * @param {string} blob - Base64 URL.\n * @param {string} fileName - The filename to appear in the download dialog.\n * @returns {void}\n */\nexport function downloadBlob(blob, fileName = 'recording.ogg') {\n    // fake a anchor tag\n    const a = document.createElement('a');\n\n    document.body.appendChild(a);\n    a.style = 'display: none';\n    a.href = blob;\n    a.download = fileName;\n    a.click();\n}\n\n/**\n * Obtains a timestamp of now.\n * Used in filenames.\n *\n * @returns {string}\n */\nexport function timestampString() {\n    const timeStampInMs = window.performance\n        && window.performance.now\n        && window.performance.timing\n        && window.performance.timing.navigationStart\n        ? window.performance.now() + window.performance.timing.navigationStart\n        : Date.now();\n\n    return timeStampInMs.toString();\n}\n","import { RecordingDelegate } from './RecordingDelegate';\nimport { downloadBlob, timestampString } from './Utils';\n\n/**\n * Using mediaRecorder (default browser encoding ogg)\n */\nexport class RecordingDelegateOgg extends RecordingDelegate {\n\n    _mediaRecorder = null;\n\n    /**\n     * Ensure that the MediaRecorder has been initialized.\n     *\n     * @returns {Promise}\n     */\n    _ensureInitialized() {\n        let p = null;\n\n        if (this._mediaRecorder === null) {\n            p = new Promise((resolve, error) => {\n                navigator.getUserMedia(\n\n                    // constraints - only audio needed for this app\n                    {\n                        audioBitsPerSecond: 44100, // 44 kbps\n                        audio: true,\n                        mimeType: 'application/ogg'\n                    },\n\n                    // Success callback\n                    stream => {\n                        // myAudioStream = stream;\n                        this._mediaRecorder = new MediaRecorder(stream);\n                        this._mediaRecorder.ondataavailable = e => this._saveMediaData(e.data);\n                        resolve();\n                    },\n\n                    // Error callback\n                    err => {\n                        console.log(`The following gUM error occurred: ${err}`);\n                        error();\n                    }\n                );\n            });\n        } else {\n            p = new Promise(resolve => {\n                resolve();\n            });\n        }\n\n        return p;\n    }\n\n    /**\n     * Implements {@link RecordingDelegate.start}.\n     *\n     * @inheritdoc\n     */\n    start() {\n        this._ensureInitialized().then(() => this._mediaRecorder.start());\n    }\n\n    /**\n     * Implements {@link RecordingDelegate.stop}.\n     *\n     * @inheritdoc\n     */\n    stop() {\n        return new Promise(\n            resolve => {\n                this._mediaRecorder.onstop = () => resolve();\n                this._mediaRecorder.stop();\n            }\n        );\n    }\n\n    /**\n     * Implements {@link RecordingDelegate.download}.\n     *\n     * @inheritdoc\n     */\n    download() {\n        if (this._recordedData !== null) {\n            const audioURL = window.URL.createObjectURL(this._recordedData);\n\n            console.log('Audio URL:', audioURL);\n            downloadBlob(audioURL, `recording${timestampString()}.ogg`);\n        }\n\n    }\n\n    /**\n     * Callback for encoded data.\n     *\n     * @private\n     * @param {*} data - Encoded data.\n     * @returns {void}\n     */\n    _saveMediaData(data) {\n        this._recordedData = data;\n    }\n}\n","import { RecordingDelegate } from '../RecordingDelegate';\nimport { downloadBlob, timestampString } from '../Utils';\n\n/**\n * Uses libflac in the background\n */\nexport class RecordingDelegateFlac extends RecordingDelegate {\n\n    _encoder = null;\n    _audioContext = null;\n    _audioProcessingNode = null;\n    _audioSource = null;\n\n    _stopPromiseResolver = null;\n\n    /**\n     * Constructor.\n     *\n     */\n    constructor() {\n        super();\n        this._encoder = new Worker('/build/flacEncodeWorker.min.js');\n        this._encoder.onmessage = e => {\n            if (e.data.command === 'end') {\n                // receiving blob\n                this._data = e.data.buf;\n                if (this._stopPromiseResolver !== null) {\n                    this._stopPromiseResolver();\n                    this._stopPromiseResolver = null;\n                }\n            } else if (e.data.cmd === 'debug') {\n                console.log(e.data);\n            } else {\n                console.error(\n                    `Unknown event\n                    from encoder (WebWorker): \"${e.data.command}\"!`);\n            }\n        };\n\n        navigator.getUserMedia(\n\n            // constraints - only audio needed for this app\n            {\n                audioBitsPerSecond: 44100, // 44 kbps\n                audio: true,\n                mimeType: 'application/ogg' // useless?\n            },\n\n            // Success callback\n            stream => {\n                // this._mediaRecorder = new MediaRecorder(stream);\n                this._audioContext = new AudioContext();\n                this._audioSource\n                 = this._audioContext.createMediaStreamSource(stream);\n                this._audioProcessingNode\n                  = this._audioContext.createScriptProcessor(4096, 1, 1);\n\n                this._audioProcessingNode.onaudioprocess = e => {\n                    // delegate to web worker\n                    const channelLeft = e.inputBuffer.getChannelData(0);\n\n                    this._encoder.postMessage({\n                        command: 'encode',\n                        buf: channelLeft\n                    });\n                };\n            },\n\n            // Error callback\n            err => {\n                console.log(`The following gUM error occurred: ${err}`);\n            }\n        );\n    }\n\n    /**\n     * Implements {@link RecordingDelegate.start}.\n     *\n     * @inheritdoc\n     */\n    start() {\n        this._encoder.postMessage({\n            command: 'init',\n            config: {\n                sampleRate: 44100,\n                bps: 16\n            }\n        });\n\n        this._audioSource.connect(this._audioProcessingNode);\n        this._audioProcessingNode.connect(this._audioContext.destination);\n    }\n\n    /**\n     * Implements {@link RecordingDelegate.stop}.\n     *\n     * @inheritdoc\n     */\n    stop() {\n        return new Promise(resolve => {\n            this._audioProcessingNode.disconnect();\n            this._audioSource.disconnect();\n            this._stopPromiseResolver = resolve;\n            this._encoder.postMessage({\n                command: 'finish'\n            });\n        });\n    }\n\n    /**\n     * Implements {@link RecordingDelegate.download}.\n     *\n     * @inheritdoc\n     */\n    download() {\n        if (this._data !== null) {\n            const audioURL = window.URL.createObjectURL(this._data);\n\n            console.log('Audio URL:', audioURL);\n\n            downloadBlob(audioURL, `recording${timestampString()}.flac`);\n        }\n\n    }\n}\n\n","import { RecordingDelegate } from './RecordingDelegate';\nimport { downloadBlob, timestampString } from './Utils';\n\n\nconst WAV_BITS_PER_SAMPLE = 16;\nconst WAV_SAMPLE_RATE = 44100;\n\n\n/**\n * Raw wav format recording\n */\nexport class RecordingDelegateWav extends RecordingDelegate {\n\n    _audioContext = null;\n    _audioProcessingNode = null;\n    _audioSource = null;\n\n    _wavLength = 0;\n    _wavBuffers = [];\n\n    /**\n     * Constructor.\n     *\n     */\n    constructor() {\n        super();\n\n        navigator.getUserMedia(\n\n            // constraints - only audio needed for this app\n            {\n                audioBitsPerSecond: WAV_SAMPLE_RATE * WAV_BITS_PER_SAMPLE,\n                audio: true,\n                mimeType: 'application/ogg' // useless?\n            },\n\n            // Success callback\n            stream => {\n\n                this._audioContext = new AudioContext();\n                this._audioSource\n                 = this._audioContext.createMediaStreamSource(stream);\n                this._audioProcessingNode\n                  = this._audioContext.createScriptProcessor(4096, 1, 1);\n\n                this._audioProcessingNode.onaudioprocess = e => {\n                    const channelLeft = e.inputBuffer.getChannelData(0);\n\n                    // https://developer.mozilla.org/en-US/docs/\n                    // Web/API/AudioBuffer/getChannelData\n                    // the returned value is an Float32Array\n\n                    this._saveWavPCM(channelLeft);\n                };\n            },\n\n            // Error callback\n            err => {\n                console.log(`The following gUM error occurred: ${err}`);\n            }\n        );\n\n        this._saveWavPCM = this._saveWavPCM.bind(this);\n    }\n\n    /**\n     * Implements {@link RecordingDelegate.start}.\n     *\n     * @inheritdoc\n     */\n    start() {\n\n        this._wavBuffers = [];\n        this._wavLength = 0;\n        this._wavBuffers.push(this._createWavHeader());\n\n\n        this._audioSource.connect(this._audioProcessingNode);\n        this._audioProcessingNode.connect(this._audioContext.destination);\n    }\n\n    /**\n     * Implements {@link RecordingDelegate.stop}.\n     *\n     * @inheritdoc\n     */\n    stop() {\n        this._audioProcessingNode.disconnect();\n        this._audioSource.disconnect();\n        this._data = this._exportMonoWAV(this._wavBuffers, this._wavLength);\n        \n        return Promise.resolve();\n    }\n\n    /**\n     * Implements {@link RecordingDelegate.download}.\n     *\n     * @inheritdoc\n     */\n    download() {\n        if (this._data !== null) {\n            const audioURL = window.URL.createObjectURL(this._data);\n\n            console.log('Audio URL:', audioURL);\n\n            downloadBlob(audioURL, `recording${timestampString()}.wav`);\n        }\n\n    }\n\n    /**\n     * Creates a WAVE file header.\n     *\n     * @private\n     * @returns {Uint8Array}\n     */\n    _createWavHeader() {\n        // adapted from https://github.com/mmig/speech-to-flac/blob/master/encoder.js\n\n        // ref: http://soundfile.sapp.org/doc/WaveFormat/\n\n        // create our WAVE file header\n        const buffer = new ArrayBuffer(44);\n        const view = new DataView(buffer);\n\n        // RIFF chunk descriptor\n        writeUTFBytes(view, 0, 'RIFF');\n\n        // set file size at the end\n        writeUTFBytes(view, 8, 'WAVE');\n\n        // FMT sub-chunk\n        writeUTFBytes(view, 12, 'fmt ');\n        view.setUint32(16, 16, true);\n        view.setUint16(20, 1, true);\n\n        // NumChannels\n        view.setUint16(22, 1, true);\n\n        // SampleRate\n        view.setUint32(24, WAV_SAMPLE_RATE, true);\n\n        // ByteRate\n        view.setUint32(28,\n            Number(WAV_SAMPLE_RATE) * 1 * WAV_BITS_PER_SAMPLE / 8, true);\n\n        // BlockAlign\n        view.setUint16(32, 1 * Number(WAV_BITS_PER_SAMPLE) / 8, true);\n\n        view.setUint16(34, WAV_BITS_PER_SAMPLE, true);\n\n        // data sub-chunk\n        writeUTFBytes(view, 36, 'data');\n\n        // DUMMY file length (set real value on export)\n        view.setUint32(4, 10, true);\n\n        // DUMMY data chunk length (set real value on export)\n        view.setUint32(40, 10, true);\n\n        return new Uint8Array(buffer);\n    }\n\n\n    /**\n     * Callback function that saves the PCM bits.\n     *\n     * @private\n     * @param {Float32Array} data - The audio PCM data.\n     * @returns {void}\n     */\n    _saveWavPCM(data) {\n        // need to copy the Float32Array,\n        // unlike passing to WebWorker,\n        // this data is passed by reference,\n        // so we need to copy it, otherwise the\n        // audio file will be just repeating the last\n        // segment.\n        \n        this._wavBuffers.push(new Float32Array(data));\n        this._wavLength += data.length;\n    }\n\n    /**\n     * \n     * @param {*} buffers \n     * @param {*} length \n     */\n    _exportMonoWAV(buffers, length) {\n        // buffers: array with\n        //  buffers[0] = header information (with missing length information)\n        //  buffers[1] = Float32Array object (audio data)\n        //  ...\n        //  buffers[n] = Float32Array object (audio data)\n\n        const dataLength = length * 2; // why multiply by 2 here?\n        const buffer = new ArrayBuffer(44 + dataLength);\n        const view = new DataView(buffer);\n\n        // copy WAV header data into the array buffer\n        const header = buffers[0];\n        const len = header.length;\n\n        for (let i = 0; i < len; ++i) {\n            view.setUint8(i, header[i]);\n        }\n\n        // add file length in header\n        view.setUint32(4, 32 + dataLength, true);\n\n        // add data chunk length in header\n        view.setUint32(40, dataLength, true);\n\n        // write audio data\n        floatTo16BitPCM(view, 44, buffers);\n\n        return new Blob([ view ], { type: 'audio/wav' });\n    }\n}\n\n\n/**\n * Helper function. Writes a UTF string to memory\n * using big endianness. Required by WAVE headers.\n *\n * @param {ArrayBuffer} view - The view to memory.\n * @param {*} offset - Offset.\n * @param {*} string - The string to be written.\n * @returns {void}\n */\nfunction writeUTFBytes(view, offset, string) {\n    const lng = string.length;\n\n    // big endianness\n    for (let i = 0; i < lng; ++i) {\n        view.setUint8(offset + i, string.charCodeAt(i));\n    }\n}\n\n/**\n * \n * @param {*} output \n * @param {*} offset \n * @param {*} inputBuffers \n */\nfunction floatTo16BitPCM(output, offset, inputBuffers) {\n\n    let input, jsize = inputBuffers.length, isize, i, s;\n\n    // first entry is header information (already used in exportMonoWAV),\n    // rest is Float32Array-entries -> ignore header entry\n    for (let j = 1; j < jsize; ++j) {\n        input = inputBuffers[j];\n        isize = input.length;\n        for (i = 0; i < isize; ++i, offset += 2) {\n            s = Math.max(-1, Math.min(1, input[i]));\n            output.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7FFF, true);\n        }\n    }\n}\n","import { RecordingDelegate } from './RecordingDelegate';\nimport { RecordingDelegateOgg } from './RecordingDelegateOgg';\nimport { RecordingDelegateFlac } from './flac/RecordingDelegateFlac';\nimport { RecordingDelegateWav } from './RecordingDelegateWav';\n\n/**\n * Recoding coordination\n */\nexport class RecordingController {\n\n    RECORDING_FORMAT = 'wav';\n\n    _delegate: RecordingDelegate = null;\n\n    /**\n     * Constructor.\n     */\n    constructor(format = this.RECORDING_FORMAT) {\n        console.log('RecordingController: format=', this.RECORDING_FORMAT);\n\n        switch (format) {\n        case 'ogg':\n            this._delegate = new RecordingDelegateOgg();\n            break;\n        case 'flac':\n            this._delegate = new RecordingDelegateFlac();\n            break;\n        case 'wav':\n            this._delegate = new RecordingDelegateWav();\n            break;\n        default:\n            throw new Error(`Unknown codec: ${this.RECORDING_FORMAT}`);\n        }\n    }\n\n    /**\n     * Signals the start of recording.\n     *\n     * @returns {void}\n     */\n    startRecording() {\n        this._delegate.start();\n    }\n\n    /**\n     * Signals the termination of recording.\n     *\n     * @returns {Promise}\n     */\n    stopRecording() {\n        return this._delegate.stop();\n    }\n\n    /**\n     * Triggers the download of recorded data.\n     * Browser only.\n     *\n     * @returns {void}\n     */\n    downloadRecordedData() {\n        this._delegate.download();\n    }\n}\n","import { RecordingController } from './RecordingController';\n\nexport * from './RecordingController';\n\nwindow.runTest = function (format = 'wav') {\n    let a = new RecordingController(format);\n    console.log('Test format', format);\n\n    setTimeout(()=>\n    {\n        console.log(\"Test starts\");\n        a.startRecording();\n        \n        setTimeout(\n            ()=> {\n                a.stopRecording().then(\n                    ()=>{\n                        console.log('Recording stopped.');\n                        a.downloadRecordedData();\n                        console.log('Download triggered');\n                    })\n            }, 10000);\n    },1000);\n}\n\n\n\n"],"sourceRoot":""}